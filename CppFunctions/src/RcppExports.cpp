// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mybreaks_rcpp
NumericVector mybreaks_rcpp(NumericVector x, double nbr);
RcppExport SEXP _CppFunctions_mybreaks_rcpp(SEXP xSEXP, SEXP nbrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type nbr(nbrSEXP);
    rcpp_result_gen = Rcpp::wrap(mybreaks_rcpp(x, nbr));
    return rcpp_result_gen;
END_RCPP
}
// hist_rcpp
List hist_rcpp(NumericVector x, NumericVector breaks);
RcppExport SEXP _CppFunctions_hist_rcpp(SEXP xSEXP, SEXP breaksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type breaks(breaksSEXP);
    rcpp_result_gen = Rcpp::wrap(hist_rcpp(x, breaks));
    return rcpp_result_gen;
END_RCPP
}
// riskhistRcpp
double riskhistRcpp(NumericVector obs01, double m);
RcppExport SEXP _CppFunctions_riskhistRcpp(SEXP obs01SEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type obs01(obs01SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(riskhistRcpp(obs01, m));
    return rcpp_result_gen;
END_RCPP
}
// broptRcpp
Rcpp::List broptRcpp(NumericVector x);
RcppExport SEXP _CppFunctions_broptRcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(broptRcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// riskhist_and_fp_Rcpp
NumericVector riskhist_and_fp_Rcpp(NumericVector obs01, double m);
RcppExport SEXP _CppFunctions_riskhist_and_fp_Rcpp(SEXP obs01SEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type obs01(obs01SEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(riskhist_and_fp_Rcpp(obs01, m));
    return rcpp_result_gen;
END_RCPP
}
// bropt_and_broptfp_Rcpp
Rcpp::List bropt_and_broptfp_Rcpp(NumericVector x);
RcppExport SEXP _CppFunctions_bropt_and_broptfp_Rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(bropt_and_broptfp_Rcpp(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CppFunctions_mybreaks_rcpp", (DL_FUNC) &_CppFunctions_mybreaks_rcpp, 2},
    {"_CppFunctions_hist_rcpp", (DL_FUNC) &_CppFunctions_hist_rcpp, 2},
    {"_CppFunctions_riskhistRcpp", (DL_FUNC) &_CppFunctions_riskhistRcpp, 2},
    {"_CppFunctions_broptRcpp", (DL_FUNC) &_CppFunctions_broptRcpp, 1},
    {"_CppFunctions_riskhist_and_fp_Rcpp", (DL_FUNC) &_CppFunctions_riskhist_and_fp_Rcpp, 2},
    {"_CppFunctions_bropt_and_broptfp_Rcpp", (DL_FUNC) &_CppFunctions_bropt_and_broptfp_Rcpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CppFunctions(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
